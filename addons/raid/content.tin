#nop ALIASY SYSTEMOWE DEFAULTS;
#alias _sugerowanywrog_ {#echo {<118>Nie ma jeszcze wroga!<088>}};
#alias _sugerowanaobrona_ {#echo {<118>Nie ma nikogo do obrony!<088>}};
#nop init;
#var raidbartable {};

#nop CONF;  #alias {gildie} {
                #nop;
            };

#nop CONF;  #alias {kondycje} {
                #var pkondycje $ConfigManager_Configs[kondycje];
                #switch {"$pkondycje"} {
                    #case {"medium"} {#alias {tabela_odswiez} {_tabela_odswiez_1_}};
                };
            }

#nop SUPER ALFA;
#nop CONF;  #alias {zacheta} {
                #var pzacheta $ConfigManager_Configs[zacheta];

                #if {"$pzacheta" == "widoczna"} {
                    _zacheta_pokaz_;
                    #list event_handler_buffer_update add _zacheta_pokaz_;
                } {
                    #list event_handler_buffer_update find _zacheta_pokaz_ _ehbuf;
                    #if {$_ehbuf} {
                        #list event_handler_buffer_update delete $_ehbuf;
                    };
                };
            }

            #alias {_zacheta_pokaz_} {
                #if {"$ConfigManager_Configs[powtorzenter]" == "wlaczony"} {
                    #var lastcmd $sendoutput;
                    #format lastcmdLen {%L} {$lastcmd};
                    #if {$lastcmdLen > 0} {
                        #sh {$duch[$CHAR_INFO[object_num]][bar][orc] <138>> <088>} {$screenrows} {1};
                    };
                } {
                    #sh {$duch[$CHAR_INFO[object_num]][bar][orc] <128>> <088>} {$screenrows} {1};
                };
            };



#nop CONF;  #alias {RaidTableGuildEnemies} {
                #local tmp {$ConfigManager_Configs[RaidTableGuildEnemies]};
                #replace tmp {,} {;};
                #list wrogowieDB create {$tmp};
                #foreach {*wrogowieDB[]} {wdb} {
                    #var gildie[$wrogowieDB[$wdb]] {w};
                };
            };

#nop CONF;  #alias {RaidTableGuildFriends} {
                #local tmp {$ConfigManager_Configs[RaidTableGuildFriends]};
                #replace tmp {,} {;};
                #list przyjacieleDB create {$tmp};
                #foreach {*przyjacieleDB[]} {pdb} {
                    #var gildie[$przyjacieleDB[$pdb]] {p};
                };
            };

#nop CONF;  #alias {RaidTableGuild} {
                #local tmp {$ConfigManager_Configs[RaidTableGuild]};
                #replace tmp {,} {;};
                #list guildDB create {$tmp};
                #foreach {*guildDB[]} {pdb} {
                    #var gildie[$guildDB[$pdb]] {g};
                };
            };

#nop EVENT; #alias {RaidTable_GMCP_Objects_Nums} {
            	#var {obnu} {%0};
            	#foreach {*duch[]} {bubu} {
            		#list {obnu} find {$bubu} {vfob};
            		#if {"$vfob" == "0"} {
            			#unvar {duch[$bubu]};
                        #unvar {duch[$bubu][bot]};
                        #unvar {duch[$bubu][enemys]};
                        #unvar {duch[$bubu][shown]};
                     	};
                	};
                assign_type;
                szukaj_wroga;
                szukaj_team;
                tabela_odswiez;
                #var objectnumsRefreshed {1};
            }

#nop EVENT; #alias {RaidTable_GMCP_Objects_Data} {
                #var {duch} {$duch} {%0};
                assign_type;
                szukaj_wroga;
                szukaj_team;
                tabela_odswiez;
                #var objectnumsRefreshed {1};
            }

#nop Ranking celow ataku;
#nop 1. Sprawdzamy kto jest wrogiem gildii;
#nop 2. Pobieramy z bazy jego poziom;
#nop    Domyslny poziom (jesli brak) to wielce+6 = 172;
#nop !! Poziom postaci to jego wyjsciowe punkty w rankingu !!;
#nop 3. Odejmujemy punkty zawodu od poziomu wg ponizszej tabeli;
#nop    Brak zawodu w bazie == GP;
#nop 4. Odejmujemy punkty brakujacego zycia, wg tabeli;
#nop 5. Odejmujemy punkty za kazdego wroga na plecach;
#nop    Ilosc punktow za kazdego wroga jest mnozona przez 2;

#nop Przyklad #1 Postac Widzial (178) WKS (-30) W dobrym stanie (-6) = 142;
#nop Przyklad #2 Postac Legenda (190) MC (-20) Ciezko ranny (-30) = 140;
#nop CEL to postac o punktacji = 140;

#function getRating {
    #if {"$duch[%1][poziom]" == ""} {
        #var duch[%1][poziom] {170};
    };
    #math calculatedRating {$duch[%1][poziom] - $rankingzawodow[$duch[%1][zawod]] - $rankinghpkow[$duch[%1][hp]] - ($duch[%1][enemies] * 2)};
    #return $calculatedRating;
}

#var rankinghpkow[0] {50};
#var rankinghpkow[1] {30};
#var rankinghpkow[2] {24};
#var rankinghpkow[3] {18};
#var rankinghpkow[4] {12};
#var rankinghpkow[5] {6};
#var rankinghpkow[6] {0};

#var rankingzawodow[WKS] {30};
#var rankingzawodow[OK] {25};
#var rankingzawodow[MC] {20};
#var rankingzawodow[SC] {15};
#var rankingzawodow[RA] {10};
#var rankingzawodow[KG] {5};
#var rankingzawodow[GP] {0};
#var rankingzawodow[KS] {-5};
#var rankingzawodow[GL] {-10};
#var rankingzawodow[OHM] {-15};


#nop ###################################################################;
#nop dla kazdej postaci w tablicy przypozadkuj dany typ;
#alias {assign_type} {
    #list wrogi {clear};
    #list neut {clear};
    #list team {clear};
    #var team_attack_target 0;
    #local nonteam_alias_value 1;

    #foreach {*duch[]} {dudu} {
       #var duch[$dudu][enemies] {0};
    };

    #foreach {*duch[]} {dudu} {

        #format {duchtrue} {%L} {$duch[$dudu][living]};
        #if {$duchtrue > 2} {

            #var duch[$dudu][bot] {};

            #if {"$pvpdb[$duch[$dudu][desc]][zawod]" != ""} {
                #var duch[$dudu][zawod] $pvpdb[$duch[$dudu][desc]][zawod];
            } {
                #var duch[$dudu][zawod] {GP};
            };

            #if {"$pvpdb[$duch[$dudu][desc]][poziom]" != ""} {
                #var duch[$dudu][poziom] $pvpdb[$duch[$dudu][desc]][poziom];
            };

            #if {$duch[$dudu][attack_num] > 0} {
   	            #math duch[$duch[$dudu][attack_num]][enemies] {$duch[$duch[$dudu][attack_num]][enemies] + 1};
            };

            #if {"$duch[$dudu][attack_target]" == "true"} {
                #var team_attack_target $dudu;
            };

            #if {"$duch[$dudu][avatar]" == "true"} {
                #var avatarid {$dudu};
                #var duch[$dudu][desc] {$AVATAR_NAME};
            } {
                #if {"$duch[$dudu][team]" == "false"} {
                    #var duch[$dudu][alias_value] $nonteam_alias_value;
                    #math nonteam_alias_value {1 + $nonteam_alias_value};
                };
                #var duch[$dudu][rating] @getRating{$dudu};

                #var test {$duch[$dudu][desc]};
                #replace test { } {_};
                #var test {${test}_};
#nop 16-03-2020;
                #if {"$postac[$test][gildia]" != ""} {
                    #line {substitute} {variables} {
                        #nop ENEMIES;
                        #if {"$gildie[$postac[$test][gildia]]" == "w"} {
                            #var duch[$dudu][typ] {wrog};
                            #var duch[$dudu][enemy] {true};
                        };
                    };
                    #if {"$postac[$test][gildia]" == "BOSS"} {
                        #var duch[$dudu][typ] {boss};
                    };
                };
#nop 16-03-2020;

            #nop sprawdzamy czy to imie, jesli tak to znaczy ze to short;
            #nop w takim wypadku szukamy flagi cached na imieniu;
            #format {gncheck} {%L} {$postac[$test][imie]};
            #format {excheck} {%L} {$postac[$test][gildia]};
            #var tmpimie {};
            #var imietype {};
            #var tmpim {};
            #var confirmed {};
	        #var tmpimietype 0;
            #if {$gncheck > 1} {
                #var confirmed {$postac[$postac[$test][imie]][cached]};
                #var tmpim $postac[$test][imie];
                #var tmpimie {$gildie[$postac[$test][gildia]] $postac[$test][gildia] $postac[$test][imie] $duch[dudu][desc]};
		        #var tmpimietype 1;
            } {
                #var confirmed {$postac[$test][cached]};
                #var tmpim $test;

                #if {"$postac[$test][gildia]" != ""} {
                    #var tmpimie {$gildie[$postac[$test][gildia]] $postac[$test][gildia] $test};
                };
		        #var tmpimietype 2;
            };
            #if {"$confirmed" == "true"} {
                #nop;
            } {
                #if {$excheck > 0} {
                    #var postac[$tmpim][cached] {true};

                    #if {"$duch[$dudu][avatar]" == "true"} {
                        #nop;
                    } {
            			#if {"$tmpimietype" == "1"} {
            				#nop;
            				#format dudu2 {%n} {$duch[$dudu][desc]};
            				#line substitute variables {
                                #if {"$ConfigManager_Configs[gildie]" == "widoczne"} {
            #nop OPISY;             #sub {$duch[$dudu][desc]} {$duch[$dudu][desc] - $postac[$test][imie]($postac[$test][gildia])};
                                    #sub {$dudu2} {$dudu2 - $postac[$test][imie]($postac[$test][gildia])};
            #nop POKOLORUJ;         #high {$duch[$dudu][desc]($postac[$test][gildia])} {$c_char_h_mode[$gildie[$postac[$test][gildia]]]};
                                } {
             #nop OPISY;            #sub {$duch[$dudu][desc]} {$duch[$dudu][desc] ($postac[$test][imie])};
                                    #sub {$dudu2} {$dudu2 ($postac[$test][imie])};
            #nop POKOLORUJ;         #high {$duch[$dudu][desc]} {$c_char_h_mode[$gildie[$postac[$test][gildia]]]};
                                    #high {$postac[$test][imie]} {$c_char_h_mode[$gildie[$postac[$test][gildia]]]};
                                };
             #nop POKOLORUJ;    #high {$dudu2} {$c_char_h_mode[$gildie[$postac[$test][gildia]]]};
            				};
            			};
            			#if {"$tmpimietype" == "2"} {
             #nop IMIE;
            				#line substitute variables {
                                #if {"$ConfigManager_Configs[gildie]" == "widoczne"} {
             #nop WSTAW GILDIE;     #sub {$duch[$dudu][desc]} {$duch[$dudu][desc]($postac[$test][gildia])};
             #nop POKOLORUJ;        #high {$duch[$dudu][desc]($postac[$test][gildia])} {$c_char_h_mode[$gildie[$postac[$test][gildia]]]};
                                } {
             #nop POKOLORUJ;        #high {$duch[$dudu][desc]} {$c_char_h_mode[$gildie[$postac[$test][gildia]]]};
                                };
            				};
            			};
                    };
                };
            };

    	    };


	          #if {"$duch[$dudu][enemy]" == "true"} {
		            #list wrogi add {$dudu};
            };
	          #elseif {"$duch[$dudu][team]" == "false"} {
                	#list neut add {$dudu};
            };
            #if {"$duch[$dudu][team]" == "true"} {
                #list team add {$dudu};
            };

        };


    }; #nop foreach duch;
};

#nop ###########################################;
#nop # FUNKCJE                                 #;
#nop ###########################################;
#function ShortToId {
    #format tmpShort {%l} {%0};
    #foreach {*duch[]} {tmpObjNum} {
        #format tmpDuch {%l} {$duch[$tmpObjNum][desc]};
        #if {"$tmpShort" == "$tmpDuch"} {
            #return {$tmpObjNum};
        };
    };
    #return 0;
};

#function IsPlayer {
    #regex {%0} {%w %w %W} {
        #format tmpShort {%l} {%0};
        #replace tmpShort { } {_};
    } {
        #regex {%0} {%w} {
            #var tmpShort {%0};
        };
    };
    #var tmpShort {${tmpShort}_};

    #if {"$postac[$tmpShort][gildia]" != "" && "$postac[$tmpShort][gildia]" != "NPC"} {
        #return 1;
    } {
        #return 0;
    }
};


#function GetEnemyTarget {
    #local myTmpId @ShortToId{%0};
    #return $duch[$myTmpId][attack_num];
};
#function IsIdTeam {
    #if {"$duch[%0][team]" == "true"} {
        #return 1;
    } {
        #return 0;
    };
}
#function IsShortTeam {
    #local myTmpId @ShortToId{%0};
    #if {"$duch[$myTmpId][team]" == "true"} {
        #return 1;
    } {
        #return 0;
    };
};
#function StrLen {
    #format tmpStrLen {%L} {%0};
    #return $tmpStrLen;
};
#nop ###########################################;
#nop ###########################################;
#nop ###########################################;

#alias {szukaj_wroga}
{
    #nop ##############;
    #nop buduje liste wrogow;
    #nop ##############;
    #list wrogi size {wros};
    #local wrog_index 1;

    #var wrog_najslabszy 0;
    #var wrog_najslabszy_hp 10;
    #var wrog_najslabszy_cnt 0;
    #var wrog_sugerowany 0;

#nop szukamy wroga gildii, najlsbaszego;
    #foreach {*wrogi[]} {www} {
        #if {"$duch[$wrogi[$www]][typ]" == "wrog"} {
        #nop jesli obaj sa rownie ranni, bijemy tego ktory jest atakowany przez wiekszosc;
            #if {$duch[$wrogi[$www]][hp] == $wrog_najslabszy_hp} {
                #if {$duch[$wrogi[$www]][enemies] > $wrog_najslabszy_cnt} {
                    #var wrog_najslabszy $wrogi[$www];
                    #var wrog_najslabszy_hp $duch[$wrogi[$www]][hp];
                    #var wrog_najslabszy_cnt $duch[$wrogi[$www]][enemies];
                };
            };
            #if {$duch[$wrogi[$www]][hp] < $wrog_najslabszy_hp} {
                #var wrog_najslabszy $wrogi[$www];
                #var wrog_najslabszy_hp $duch[$wrogi[$www]][hp];
                #var wrog_najslabszy_cnt $duch[$wrogi[$www]][enemies];
            };
        };
    };

#nop jesli nie znalezlismy najslabszego z wrogow gildii;
#nop szukamy najslabszego z wrogow;
    #if {$wrog_najslabszy_hp > 9} {
        #foreach {*wrogi[]} {www} {
            #nop jesli obaj sa rownie ranni, bijemy tego ktory jest atakowany przez wiekszosc;
            #if {$duch[$wrogi[$www]][hp] == $wrog_najslabszy_hp} {
                #if {$duch[$wrogi[$www]][enemies] > $wrog_najslabszy_cnt} {
                    #var wrog_najslabszy $wrogi[$www];
                    #var wrog_najslabszy_hp $duch[$wrogi[$www]][hp];
                    #var wrog_najslabszy_cnt $duch[$wrogi[$www]][enemies];
                };
            };

            #if {$duch[$wrogi[$www]][hp] < $wrog_najslabszy_hp} {
                #var wrog_najslabszy $wrogi[$www];
                #var wrog_najslabszy_hp $duch[$wrogi[$www]][hp];
                #var wrog_najslabszy_cnt $duch[$wrogi[$www]][enemies];
            };
        }
    };

#nop jesli nie jestesmy dowodca druzyny i jest ustawiony cel ataku;
#nop nadpisujemy wybor wroga;
    #if {"$duch[$avatarid][team_leader]" == "false"} {
        #foreach {*wrogi[]} {www} {
            #if {"$duch[$wrogi[$www]][attack_target]" == "true"} {
                #var wrog_najslabszy $wrogi[$www];
                #var wrog_najslabszy_hp $duch[$wrogi[$www]][hp];
            };
        };
    };

#nop wrzucamy sugerowanego F1 do atrybutow;
    #if {$wrog_najslabszy_hp < 10} {
        #nop TO REDO;
        #var wrog_sugerowany $wrog_najslabszy;
        #var duch[$wrog_najslabszy][bot] {SA1};

	#line sub variables {#alias _sugerowanywrog_ {_zabij_ ob_$wrog_najslabszy}};
	#nop macro {$KEY_F1} {_zabij_ ob_$wrog_najslabszy};
	#nop macro {\e[11~} {_zabij_ ob_$wrog_najslabszy};

    };
}



#alias {szukaj_team}
{
    #list team size {teas};
    #var team_najslabszy 0;
    #var team_najslabszy_hp 10;
    #var team_najslabszy_cnt 0;
    #var team_sugerowany 0;
    #var team_celobrony 0;

    #foreach {*team[]} {www} {
        #if {$duch[$team[$www]][enemies] > 0} {
            #if {$duch[$team[$www]][hp] == $team_najslabszy_hp} {
                #if {$duch[$team[$www]][enemies] > $team_najslabszy_cnt} {
                    #var team_najslabszy $team[$www];
                    #var team_najslabszy_hp $duch[$team[$www]][hp];
                    #var team_najslabszy_cnt $duch[$team[$www]][enemies];
                };
            };
            #elseif {$duch[$team[$www]][hp] < $team_najslabszy_hp} {
                #var team_najslabszy $team[$www];
                #var team_najslabszy_hp $duch[$team[$www]][hp];
                #var team_najslabszy_cnt $duch[$team[$www]][enemies];
            };
        };
    };

    #if {$team_najslabszy_hp < 10} {
        #var duch[$team_najslabszy][bot] {SO1};
        #var team_sugerowany $team_najslabszy;

    	  #line sub variables {
    		    #alias _sugerowanaobrona_ {_zaslon_ $team_najslabszy};
    	  };
    };

    #nop jesli nie jestesmy dowodca druzyny i jest ustawiony cel obrony jako SO2;
    #if {"$duch[$avatarid][team_leader]" == "false"} {
        #foreach {*team[]} {www} {
            #if {"$duch[$team[$www]][defence_target]" == "true"} {
		            #var duch[$team[$www]][bot] {SO2};
            };
        };
    };
};

#alias {tabela_odswiez} {_tabela_odswiez_1_};

#nop ---------------;
#nop Kondycje medium;
#nop ---------------;

#alias {/z %1} {_zabij_ ob_$_objs[%1]} {1};
#alias {/x %1} {zaskocz ob_$_objs[%1]} {1};
#alias {/wz %1} {gzwycofaj sie zaob_$_objs[%1]} {1};
#alias {/za %1} {_zaslon_ ob_$_objs[%1]} {1};

#function getObjectPrint {

    #nop  B/J C      D    A FE   G       FH  I  ;
    #nop [ @][12][#######]>>  Eldakar    X -> 1 ;
    #nop 12345678901234567890123456789012345678 ;
    #nop [ a][  ][#######]  [^Angar  ]       ;

#nop default G color;
            #local Gcolor {<078>};
#nop enemy C;
            #if {$duch[%1][enemies] < 1} {
                #local Csym {  }} {
                    #format Csym {%+2s} {$duch[%1][enemies]}};
#nop defense A;
            #if {"$duch[%1][defense_target]" == "true"} {
                #local Asym {<128> >><088>}} {#local Asym {}};
#nop attacktarget A;
            #if {"$duch[%1][attack_target]" == "true"} {
                #local Asym {<118> >><088>}} {#local Asym {}};
#nop bind A;
            #if {"$duch[%1][bot]" == "SO1"} {
                #local Asym {<118> !!<088>}} {#local Asym {}};
#nop bind A;
            #if {"$duch[%1][bot]" == "SA1"} {
                #local Asym {<118> !!<088>}} {#local Asym {}};
#nop alias B;
            #if {$avatarid == %1} {
                #var duch[%1][alias_value] {@};
                #local Bsym {[ @]};
            };
            #elseif {"$duch[%1][team]" == "true"} {
                #list ateam find $duch[%1][desc] BsymV;
                #math BsymV {$BsymV+96};#format Bsym {%a} {$BsymV};
                #var duch[%1][alias_value] $Bsym;
                #local Bsym {[ ${Bsym}]};
                #local Gcolor {<128>};
            };
            #else {
                #local Bsym {[ ${duch[%1][alias_value]}]};
            };
#nop leader E;
            #if {"$duch[%1][team_leader]" == "true"} {
                #local Esym {^}} {#local Esym { }};
#nop hidden F;
            #if {"$duch[%1][hidden]" == "true"} {
                #local FsymL {[};#local FsymR {]};
            } {#local FsymL {};#local FsymR {}};
#nop target H;
            #if {"$duch[%1][attack_num]" != "false"} {
                #if {"$duch[%1][team]" == "true" && $team_attack_target > 0 && $team_attack_target != $duch[%1][attack_num]} {
                    #local Hsym {  <118>X <078>-> $duch[$duch[%1][attack_num]][alias_value]};
                } {
                    #local Hsym {  <078>-> $duch[$duch[%1][attack_num]][alias_value]};
                }
            } {
                #local Hsym {};
            };
#nop broken J;
            #if {"$manewry[%1]" == "przelamany"} {
                #local Jsym {<FED><aaa>}} {#local Jsym {}};
#nop nick G;
            #if {"$duch[%1][team]" == "true" || %1 == $avatarid} {
                #format Gsym {%-10%.10s} {$duch[%1][desc]};
            } {
                #format Gsym {%-10%.10s} {$duch[%1][desc]};
            };
#nop nickcolor G;
            #if {"$duch[%1][team]" == "true" && %1 != $avatarid} {
                #local Gcolor {<028>};
            };
            #elseif {"$duch[%1][enemy]" == "true"} {
                #local Gcolor {<058>};
            };
            #if {%1 == $duch[$avatarid][attack_num]} {#local Gcolor <118>};
#nop RENDER;
            #return {
<078>${Jsym}${Bsym}[<118>$Csym<078>]$healthbars3[$duch[%1][hp]]$Asym<138>$Esym<078>$FsymL$Gcolor$Gsym<078>$FsymR$Hsym<088>};

};


#alias {_tabela_odswiez_1_} {
    #list leftraid clear;
    #list rightraid clear;
    #list leftraid create;
    #list rightraid create;

#nop  B/J C      D    A FE   G   FH  I   ;
#nop [ @][12][#######]>>  Eldakar X -> 1 ;
#nop [ a][  ][#######]  [^Angar  ]       ;

    #nop -- draw avatar --;

    #local ret @getObjectPrint{$avatarid};
    #list leftraid add $ret;


    #foreach {*ateam[]} {k} {
        #local v $ateam[$k];
        #list ateam size ateam_size;
        #if {$ateam_size > 0} {
            #nop -- if no objid mapped, he was never present --;
            #if {"$ateam_reverse[$v]" == ""} {
                    #list leftraid add {<bbb>[  ][  ][xxxxxxx] $v};
            };
            #nop -- if objid mapped, but not present --;
            #elseif {"$duch[$ateam_reverse[$v]][hp]" == ""} {
                #list leftraid add {<bbb>[  ][  ][xxxxxxx] $v};
            };
            #nop -- if objid no longer a team member;
            #nop elseif {"$duch[$ateam_reverse[$v][team]]" == "false"} {};
            #nop -- objid mapped and present --;
            #else {
                #local r $ateam_reverse[$v];
                #local ret @getObjectPrint{$r};
                #list leftraid add $ret
            };
        };
    };

    #foreach {*wrogi[]} {k} {
        #local v $wrogi[$k];
        #local ret @getObjectPrint{$v};
        #list rightraid add $ret;
    };

    #foreach {*neut[]} {k} {
        #if {$avatarid != $neut[$k]} {
            #local ret @getObjectPrint{$neut[$k]};
            #list rightraid add $ret;
        };
    };

    #foreach {*duch[]} {du} {

                #if {"$duch[$du][typ]" == "wrog"} {
                    #local colorBG {<088>};
                    #local colorFG {<118>};
                };
                #if {"$duch[$du][typ]" == "boss"} {
                    #local colorBG {<AAA>};
                    #local colorFG {<bbf>};
                };
                #if {"$duch[$du][attack_target]" == "true"} {
                    #local colorBG {<BAC>};
                    #local colorFG {<fff>};
                };
                #if {"$duch[$du][bot]" == "SA1"} {
                    #local colorBG {<FAA>};
                    #local colorFG {<fff>};
                };
    };
};

#action {Zapamietane przez ciebie imiona to %* i %2.} {
	#list przedstawieni clear;
	#var str_przedstawieni {%1};
	#replace str_przedstawieni {{, | i }} {;};
	#list przedstawieni create {$str_przedstawieni};

	#foreach {*przedstawieni[]} {przedstawiony} {

			#var test {$przedstawieni[$przedstawiony]};
			#var test {${test}_};

			#format {excheck} {%L} {$postac[$test][gildia]};

			#if {$excheck > 1} {
                #if {"$ConfigManager_Configs[gildie]" == "widoczne"} {
                    #line substitute variables {
        				#sub {$przedstawieni[$przedstawiony]} {$przedstawieni[$przedstawiony]($postac[$test][gildia])};
    			        #high {$przedstawieni[$przedstawiony]($postac[$test][gildia])} {$c_char_h_mode[$gildie[$postac[$test][gildia]]]};
                    };
                } {
                    #line substitute variables {
                        #high {$przedstawieni[$przedstawiony]} {$c_char_h_mode[$gildie[$postac[$test][gildia]]]};
                    };
                };
			};
	};
};


#action {Osoby, ktore zostaly ci ostatnio przedstawione, to %1 i %2.} {
	#list przedstawieni clear;
	#var str_przedstawieni {%1};
	#replace str_przedstawieni {{, | i }} {;};
	#list przedstawieni create {$str_przedstawieni};

	#foreach {*przedstawieni[]} {przedstawiony} {

			#var test {$przedstawieni[$przedstawiony]};
			#var test {${test}_};

			#format {excheck} {%L} {$postac[$test][gildia]};

			#if {$excheck > 1} {
                #if {"$ConfigManager_Configs[gildie]" == "widoczne"} {
    				#line substitute variables {
        				#sub {$przedstawieni[$przedstawiony]} {$przedstawieni[$przedstawiony]($postac[$test][gildia])};
				        #high {$przedstawieni[$przedstawiony]($postac[$test][gildia])} {$c_char_h_mode[$gildie[$postac[$test][gildia]]]};
				    };
                } {
                    #line substitute variables {
                        #high {$przedstawieni[$przedstawiony]} {$c_char_h_mode[$gildie[$postac[$test][gildia]]]};
                    };
                };
			};
	};
};


#nop ###################################################;
#nop ########## obsluga okna druzyny ###################;
#nop ########## i ustawianie brakujacych ###############;
#action {Druzyne prowadzi %*, zas ty jestes jej jedynym czlonkiem.} {#local ret @team_reset{%1, %69}};
#action {Druzyne prowadzi %* i oprocz ciebie sa w niej jeszcze: %69.} {#local ret @team_reset{%1, %69}};
#action {Prowadzisz druzyne, w ktorej oprocz ciebie jest jeszcze %69.} {#local ret @team_reset{%69}};
#action {Przewodzisz druzynie, w ktorej oprocz ciebie jest jeszcze %69.} {#local ret @team_reset{%69}};
#action {Dolaczasz do druzyny %*. Od teraz jej sklad stanowicie ty, %69.} {#local ret @team_reset{%69}};
#action {%w dolacza do druzyny.} {#local ret @team_append{%1}};
#action {%w porzuca druzyne!} {#local ret @team_remove{%1}};

#function team_reset {
    #nop -- string to table --;
    #local   teamstring {%1};
    #replace teamstring {{ i |, }} {;};
    #nop -- reset table values --;
    #list ateam clear;
    #list ateam_reverse clear;
    #list ateam create {$teamstring};
    #nop -- map objs --;
    #foreach {*ateam[]} {k} {
        #foreach {*duch[]} {dudu} {
            #if {"$ateam[$k]" == "$duch[$dudu][desc]"} {
                #var ateam_reverse[$ateam[$k]] {$dudu};
            };
        };
    };
    #nop -- trigger redraw --;
    tabela_odswiez;
    RaidBar_refresh;
};
#alias {team_test} {
    #showme {Prowadzisz druzyne, w ktorej oprocz ciebie jest jeszcze Wilibald, Vesper, Ozum, Tayalea, Dargoth i Troal, Pablo, Ardberg, Angar, Daggerro, Thran, Gash, Bloorp, Ravis.};
    #var ateam;
    #var ateam_reverse;
}

#nop ############# dopelniacze #############################;
#function match {
    #var _stra_ {%1};
    #var _strb_ {%2};
    #var match 0;
    #replace _stra_ { } {;};
    #replace _strb_ { } {;};
    #list _stra_l_ create {$_stra_};
    #list _strb_l_ create {$_strb_};
    #list _stra_l_ size _stra_l_s_;
    #list _strb_l_ size _strb_l_s_;
    #if {$_strb_l_s_ != $_stra_l_s_} {
        #return -1;
    };
    #foreach {*_strb_l_[]} {stblv} {
        #math _matchinglen_ {@StrLen{$_strb_l_[$stblv]} - (@StrLen{$_strb_l_[$stblv]} / 4)};
        #format compareleft_a {%.${_matchinglen_}s} {$_strb_l_[$stblv]};
        #format compareleft_b {%.${_matchinglen_}s} {$_stra_l_[$stblv]};
        #if {"$compareleft_a" == "$compareleft_b"} {
            #math match {$match + 1};
        };
    };

    #if {$match == $_strb_l_s_} {
        #return 0;
    } {
        #return -1;
    };
}
