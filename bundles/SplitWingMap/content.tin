#var raidbartable {};

#alias SplitWingMap_Offset {
    #math offsety 1;
    #screen get cols screencols;
    #screen get rows screenrows;
    #math offsetx {$screencols - $global_bundle_slots_values[prompt][right] + 2};
    #math offseth {$screencols};

    #math offsetw {$screenrows - $global_bundle_slots_values[prompt][bottom] - $ConfigManager_Configs[RaidSize]};
    #nop math offsetw {$praidsize};

    #math raidoffsety {$global_bundle_slots_values[prompt][top] + $praidsize + 1};
    #math raidoffsetw {$screenrows - $global_bundle_slots_values[prompt][bottom]-1};
    #math raidoffsetx {$screencols - $global_bundle_slots_values[prompt][right] + 1};    
    #map offset $offsety $offsetx $offsetw $offseth;
};

#alias {SplitWingMapWidth} {
    #var global_bundle_slots_values[prompt][right] $ConfigManager_Configs[SplitWingMapWidth];
    #if {$ConfigManager_Configs[SplitWingMapWidth] < 1} {
        #map flag vtmap off;
        #unevent {VARIABLE UPDATED objectnumsRefreshed} {RaidBar_refresh};  #nop RAIDTABLE HOOK;
    } {
        #map flag vtmap on;
        #event {VARIABLE UPDATED objectnumsRefreshed} {RaidBar_refresh};    #nop RAIDTABLE HOOK;
    };
    SplitWingMap_Offset;
 #nop    RaidBar_refresh;
    #nop Dependency: SplitRefresh;
    SplitRefreshRequestRefresh;
};

#alias {RaidSize} {
    #if {$ConfigManager_Configs[RaidSize] > 0} {
        #var praidsize {$screenrows - $global_bundle_slots_values[prompt][bottom] - $global_bundle_slots_values[prompt][top] - $ConfigManager_Configs[RaidSize]};
    } {
        #math praidsize {$screenrows - $global_bundle_slots_values[prompt][bottom] - $global_bundle_slots_values[prompt][top] - 5};
    };
    RaidBar_refresh;
    SplitWingMap_Offset;
}

#alias {doubleclick} {
    #switch {"$MacroManager_Macros[doubleclick]"} {
        #case {"walk"} {#alias raidmap_map_double_clicked_mouse_button_one {raidmap_map_double_clicked_mouse_button_one_walk}};
        #case {"run"} {#alias raidmap_map_double_clicked_mouse_button_one {raidmap_map_double_clicked_mouse_button_one_run}};
        #case {"path"} {#alias raidmap_map_double_clicked_mouse_button_one {raidmap_map_double_clicked_mouse_button_one_path}};
        #case {"ball"} {#alias raidmap_map_double_clicked_mouse_button_one {raidmap_map_double_clicked_mouse_button_one_ball}};
        #default {
            #alias raidmap_map_double_clicked_mouse_button {raidmap_map_double_clicked_mouse_button_one_ball};
            #var MacroManager_Macros[doubleclick] {ball};
        };
    };
};




#alias {RaidBar_refresh} {
    #if {$praidsize > 0 && "$raidbartable" != ""} {
        #draw jeweled box $raidoffsety $raidoffsetx $raidoffsetw $screencols <088>$raidbartable; #nop ORG;
    };
}

#alias {SplitWingMap_refresh} {
    #math global_bundle_slots_values[prompt][right] {$ConfigManager_Configs[SplitWingMapWidth] + 0};

    #if {$global_bundle_slots_values[prompt][right] < 1} {
        #var ConfigManager_Configs[SplitWingMapWidth] {10};
        #var global_bundle_slots_values[prompt][right] {10};
    };
    RaidBar_refresh;    
    SplitWingMap_Offset;
};

#alias {SplitWingMap_Popup} {
    #if {$ConfigManager_Configs[SplitWingMapWidth] > 20} {
        #draw violet circled box $offsetw-15 $offsetx+3 $offsetw-7 $offseth-3 <088>%0;
    };
};

#alias {SplitWingMap_Journal} {
    #if {$ConfigManager_Configs[SplitWingMapWidth] > 20} {
            #nop                   Y          X        Y + H        X + W            ;      
            #nop draw jeweled box $offsety+34 $offsetx+3 $offsetw-5 $offseth-3 <088>%0;
            #math maxheight { ($offsetw - 5 - $offsety) / 3 };
            #math bot_row {$offsetw - ($offsetw / 5)};
            #draw bottom tile $bot_row $offsetx $offsetw $offseth-3 <088>%0;
    };
};

#alias {SplitWingMap_Journal_1} {
    #if {$ConfigManager_Configs[SplitWingMapWidth] > 20} {
        #draw tile $offsetw-2 $offsetx $offsetw $offseth <088>%0;
    };
};

#alias {SplitWingMap_Journal_2} {
    #if {$ConfigManager_Configs[SplitWingMapWidth] > 20} {
        #draw tile $offsetw-3 $offsetx $offsetw $offseth <088>%0;
    };
};

#alias {SplitWingMap_Journal_3} {
    #if {$ConfigManager_Configs[SplitWingMapWidth] > 20} {
        #draw tile $offsetw-4 $offsetx $offsetw $offseth <088>%0;
    };
};

#alias {SplitWingMap_Journal_4} {
    #if {$ConfigManager_Configs[SplitWingMapWidth] > 20} {
        #draw tile $offsetw-5 $offsetx $offsetw $offseth <088>%0;
    };
};

#alias {SplitWingMap_Journal_5} {
    #if {$ConfigManager_Configs[SplitWingMapWidth] > 20} {
        #draw tile $offsetw-6 $offsetx $offsetw $offseth <088>%0;
    };
};


#alias {SplitWingMap_Board} {
    #if {$ConfigManager_Configs[SplitWingMapWidth] > 20} {
        #draw jeweled box $offsety+10 $offsetx+3 $offsetw-5 $offseth-3 <088>%0;
    };
};

#alias {SplitWingMap_LabelMap} {
    #if {$ConfigManager_Configs[SplitWingMapWidth] > 20} {
        #draw circled box $offsety+2 $offsetx+3 $offsety+4 $offseth-3 <088>%0<088>;
    };
};

#alias {SplitWingMap_LabelBind} {
    #if {$ConfigManager_Configs[SplitWingMapWidth] > 20} {
        #nop draw green circled box $offsety+5 $offsetx+3 $offsety+7 $offseth-3 <128>BIND LOKACJA: %0;
        #draw green circled box $offsety $offsetx $offsety+2 $offseth <128>BIND LOKACJA: %0;
    };
};

#alias {SplitWingMap_LabelBind_Reverse} {
    #if {$ConfigManager_Configs[SplitWingMapWidth] > 20} {
        #nop draw green circled box $offsety+5 $offsetx+3 $offsety+7 $offseth-3 <128>BIND LOKACJA: %0;
        #draw <AFA> circled ascii center box $offsety $offsetx+2 $offsety+2 $offseth-2 <AFA><aaa>BIND LOKACJA: %0;
    };
};

#alias {SplitWingMap_Warning} {
    #if {$ConfigManager_Configs[SplitWingMapWidth] > 20} {
        #draw red tubed box $offsety+1 $offsetx+3 $offsety+3 $offseth-3 <118>%0<088>;
    };
};



#var topdrag 0

#alias {raidmap_pressed_mouse_button_one}
{
    #screen get SPLIT_BOT_BAR top;
    #screen get SPLIT_RIGHT_BAR right;
    #screen get cols cols;
    #math curright {$cols - %2 + 1};
    #math curbott {$screenrows - %1};
    #var {o_x} %1;
    #var {o_y} %2;

    #if {$right == $curright}
    {
       #var rightdrag 1
    };
    #if {$curright < $right} {
        #if {$curbott > $top && $o_x > $global_bundle_slots_values[prompt][top]} {
            #var mapcenter 1;
        };
    };

    #nop sh {curright = $curright | curbott = $curbott | right = $right | top = $top | topdrag: $topdrag rightdrag: $rightdrag map: $mapcenter buttons $mapbuttons | chatdrag: $chatdrag};
}

#alias raidmap_released_mouse_button_one
{
    #var topdrag 0;
    #var rightdrag 0;
    #var mapcenter 0;
    #var chatdrag 0;
}

#alias raidmap_moved_mouse_button_one
{
    #if {$rightdrag}
    {
        #math boooom {$cols - %2};
        /conf SplitWingMapWidth $boooom;
    };
    #if {$mapcenter} {
        #var d_x %1;
        #var d_y %2;
        #math {c_x} {$o_x - $d_x};
        #math {c_y} {$d_y - $o_y};
        #map center $c_y $c_x 0;
    }
}

#alias raidmap_scrolled_mouse_wheel_up
{
    #if {%2 == 0 || %2 == 1} {#cursor history prev} {
        #buffer up 1;
    }
}

#alias raidmap_scrolled_mouse_wheel_down
{
    #if {%2 == 0 || %2 == 1} {#cursor history next} {
        #buffer down 1;
    }
}

#alias raidmap_map_double_clicked_mouse_button_one {
    #map center;
    #nop map run {%1} {0.25};
    #map goto {%1};
    #var pathinprogress 1;
};

#alias raidmap_map_double_clicked_mouse_button_one_run {
    #map center;
    #map run {%1} {0.25};
    #var pathinprogress 1;
};

#alias raidmap_map_double_clicked_mouse_button_one_walk {
    #map center;
    #map run {%1} {1.50};
    #var pathinprogress 1;
};


#alias raidmap_map_double_clicked_mouse_button_one_ball {
    #map center;
    #map goto {%1};
};

#alias raidmap_map_double_clicked_mouse_button_one_path {
    #map find {%1};
};


#alias raidmap_hide {
    #var hidden_raidmap_size $global_bundle_slots_values[prompt][right];    
    #list bundle_handler_split_request                       find SplitWingMap_refresh _eva;
    #list bundle_handler_split_request                       delete $_eva;
    #list event_handler_pressed_mouse_button_one             find raidmap_pressed_mouse_button_one _evb;
    #list event_handler_pressed_mouse_button_one             delete $_evb;
    #list event_handler_released_mouse_button_one            find raidmap_released_mouse_button_one _evc;
    #list event_handler_released_mouse_button_one            delete $_evc;
    #list event_handler_moved_mouse_button_one               find raidmap_moved_mouse_button_one _evd;
    #list event_handler_moved_mouse_button_one               delete $_evd;
    #list event_handler_scrolled_mouse_wheel_up              find raidmap_scrolled_mouse_wheel_up _eve;
    #list event_handler_scrolled_mouse_wheel_up              delete $_eve;
    #list event_handler_scrolled_mouse_wheel_down            find raidmap_scrolled_mouse_wheel_down _evf;
    #list event_handler_scrolled_mouse_wheel_down            delete $_evf;
    #list event_handler_map_double_clicked_mouse_button_one  find raidmap_map_double_clicked_mouse_button_one _evg;
    #list event_handler_map_double_clicked_mouse_button_one  delete $_evg;

    #list event_handler_map_updated_vtmap                    find mapa_map_updated_vtmap _evh;
    #list event_handler_map_updated_vtmap                    delete $_evh;

    #unvar _eva;
    #unvar _evb;
    #unvar _evc;
    #unvar _evd;
    #unvar _eve;
    #unvar _evf;
    #unvar _evg;

    #var global_bundle_slots_values[prompt][right] 0;
    #unevent {VARIABLE UPDATED objectnumsRefreshed} {RaidBar_refresh};
    #map flag vtmap off;
    #line quiet SplitRefreshRequestRefresh;
};

#alias raidmap_show {
    #list bundle_handler_split_request                       add {SplitWingMap_refresh};
    #list event_handler_pressed_mouse_button_one             add {raidmap_pressed_mouse_button_one};
    #list event_handler_released_mouse_button_one            add {raidmap_released_mouse_button_one};
    #list event_handler_moved_mouse_button_one               add {raidmap_moved_mouse_button_one};
    #list event_handler_scrolled_mouse_wheel_up              add {raidmap_scrolled_mouse_wheel_up};
    #list event_handler_scrolled_mouse_wheel_down            add {raidmap_scrolled_mouse_wheel_down};
    #list event_handler_map_double_clicked_mouse_button_one  add {raidmap_map_double_clicked_mouse_button_one};
    
    #list event_handler_map_updated_vtmap add {mapa_map_updated_vtmap};
    #event {VARIABLE UPDATED objectnumsRefreshed} {RaidBar_refresh};    #nop RAIDTABLE HOOK;
    #map flag vtmap on;
    /conf SplitWingMapWidth $hidden_raidmap_size;
}


#nop alias raidmap_roza {
    #if {"$rozk2[nw]" != " "} {#var blockcolor[nw] <ABA>;} {#var blockcolor[nw] <G03>;};
    #if {"$rozk2[ne]" == "/"} {#var blockcolor[ne] <ABA>;} {#var blockcolor[ne] <G03>;};
    #if {"$rozk2[n]" == "|"} {#var blockcolor[n] <ABA>;} {#var blockcolor[n] <G03>;};
    #if {"$rozk2[w]" == "-"} {#var blockcolor[w] <ABA>;} {#var blockcolor[w] <G03>;};
    #if {"$rozk2[e]" == "-"} {#var blockcolor[e] <ABA>;} {#var blockcolor[e] <G03>;};
    #if {"$rozk2[s]" != " "} {#var blockcolor[s] <ABA>;} {#var blockcolor[s] <G03>;};
    #if {"$rozk2[se]" != "  "} {#var blockcolor[se] <ABA>;} {#var blockcolor[se] <G03>;};
    #if {"$rozk2[sw]" != "  "} {#var blockcolor[sw] <ABA>;} {#var blockcolor[sw] <G03>;};
    #if {"$rozk2[d]" != " "} {#var blockcolor[d] <ABA>;} {#var blockcolor[d] <G03>;};
    #if {"$rozk2[u]" != " "} {#var blockcolor[u] <ABA>;} {#var blockcolor[u] <G03>;};
    #if {"$rooa" != ""} {#var blockcolor[bind] <AAB><fff>} {#var blockcolor[bind] <G01><g01>};

    #draw <088><128> rounded table $offsetw-13 $offsetx $offsetw $offseth {$blockcolor[nw]NW\n;$blockcolor[n]N\n;$blockcolor[ne]NE\n;$blockcolor[u]A\n} {$blockcolor[w]W\n;$blockcolor[bind]LOK\n;$blockcolor[e]E\n;<FFA><aaa>BIND\n} {$blockcolor[sw]SW\n;$blockcolor[s]S\n;$blockcolor[se]SE\n;$blockcolor[d]V\n};
};

#alias raidmap_attacks {
    #draw <088><118> rounded table $offsetw-25 $offseth-5 $offsetw-13 $offseth {<FAA><fff>CEL\n} {<AAB><fff>OBR\n} {<ABA><fff>EXP\n};  
}

#alias raidmap_poczta_on {
    #draw <088><118> rounded box $offsety $screencols-7 $offsety+2 $offseth {<FAA><fff>POCZTA};
};

#alias raidmap_poczta_off {
    #draw blanked box $offsety $screencols-7 $offsety+2 $offseth {};
};

#alias poczta_start {
    #ticker poczta {raidmap_poczta_on;#delay {1} {raidmap_poczta_off}} {2};
};

#alias {/p} {
    #unticker poczta;
    raidmap_poczta_off;
} {1};
